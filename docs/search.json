[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R_Guide_notes",
    "section": "",
    "text": "Ces pages sont le résumé des notes prises en explorant l’excellent ouvrage de Joseph Larmarange R-guide. Pour accéder à l’original1, il suffit de cliquer sur son nom ci-dessus.\n1 l’original est toujours mieux que n’importe quelle copie !"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html#bienvenue",
    "href": "index.html#bienvenue",
    "title": "R_Guide_notes",
    "section": "",
    "text": "Ces pages sont le résumé des notes prises en explorant l’excellent ouvrage de Joseph Larmarange R-guide. Pour accéder à l’original1, il suffit de cliquer sur son nom ci-dessus.\n1 l’original est toujours mieux que n’importe quelle copie !"
  },
  {
    "objectID": "index.html#licence",
    "href": "index.html#licence",
    "title": "R_Guide_notes",
    "section": "2 Licence",
    "text": "2 Licence\nCe document est mis à disposition selon les mêmes termes que le document original CC BY-NC-SA :\n\nCC : Creative commons\nBY : Attribution, c’est à dire que vous devez citer Joseph LARMARANGE si vous publiez un ou des extraits de son travail\nNC : Non Commercial, c’est à dire que vous n’avez pas le droit de vendre ces publications\nSA : Share sAme conditions, c’est à dire que vous devez publier votre travail sous ces mêmes conditions."
  },
  {
    "objectID": "index.html#footnotes",
    "href": "index.html#footnotes",
    "title": "R_Guide_notes",
    "section": "Notes de bas de page",
    "text": "Notes de bas de page\n\n\nl’original est toujours mieux que n’importe quelle copie !↩︎"
  },
  {
    "objectID": "001_dplyr.html",
    "href": "001_dplyr.html",
    "title": "dplyr",
    "section": "",
    "text": "dplyr facilite le traitement et la manipulation des tableaux de données (qu’il s’agisse de data frame ou de tibble). Il propose une syntaxe claire et cohérente, sous formes de verbes correspondant à des fonctions.\nLes verbes de dplyr prennent en entrée un tableau de données (data frame ou tibble) et renvoient systématiquement un tibble.\nCharger le package :\nlibrary(dplyr, warn.conflicts = FALSE)\nCharger le jeu de données nycflights13, données de tous les vols au départ des aéroports de New-York en \\(2013\\), répartis en \\(3\\) tables1 :\nCharger le package :\nlibrary(nycflights13)\nCharger les tables :\ndata(flights)\ndata(airports)\ndata(airlines)"
  },
  {
    "objectID": "001_dplyr.html#opérations-sur-les-lignes",
    "href": "001_dplyr.html#opérations-sur-les-lignes",
    "title": "dplyr",
    "section": "Opérations sur les lignes",
    "text": "Opérations sur les lignes\n\nfilter()\nfilter() des lignes d’une table selon une condition passée en paramètre.\nSeules les lignes pour lesquelles le test renvoie TRUE sont renvoyées2.\n2 une ligne pour laquelle le test renvoie FALSE (faux) ou NA, d’est à dire non avable (valeur manquante) sera ignorée, donc pas renvoyée3 variable monthSélection des vols du mois de janvier3 :\n\nfilter(flights, month == 1)\n\n# A tibble: 27,004 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 26,994 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nOu plus simplement avec un pipe :\n\nflights |&gt; \n  filter(month == 1)\n\n# A tibble: 27,004 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 26,994 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nSélectionner les vols avec un retard au départ4 entre 10 et 15 minutes :\n4 variable dep_delay\nflights |&gt; \n  filter(dep_delay &gt;= 10 & dep_delay &lt;= 15)\n\n# A tibble: 14,919 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      611            600        11      945            931\n 2  2013     1     1      623            610        13      920            915\n 3  2013     1     1      743            730        13     1107           1100\n 4  2013     1     1      743            730        13     1059           1056\n 5  2013     1     1      851            840        11     1215           1206\n 6  2013     1     1      912            900        12     1241           1220\n 7  2013     1     1      914            900        14     1058           1043\n 8  2013     1     1      920            905        15     1039           1025\n 9  2013     1     1     1011           1001        10     1133           1128\n10  2013     1     1     1112           1100        12     1440           1438\n# ℹ 14,909 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nTester avec une fonction. Les vols avec la plus grande distance :\n\nflights |&gt; \n  filter(distance == max(distance))\n\n# A tibble: 342 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      857            900        -3     1516           1530\n 2  2013     1     2      909            900         9     1525           1530\n 3  2013     1     3      914            900        14     1504           1530\n 4  2013     1     4      900            900         0     1516           1530\n 5  2013     1     5      858            900        -2     1519           1530\n 6  2013     1     6     1019            900        79     1558           1530\n 7  2013     1     7     1042            900       102     1620           1530\n 8  2013     1     8      901            900         1     1504           1530\n 9  2013     1     9      641            900      1301     1242           1530\n10  2013     1    10      859            900        -1     1449           1530\n# ℹ 332 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\n\n\n\n\nÉvaluation contextuelle\n\n\n\ndplyr procède à une évaluation contextuelle des expressions qui lui sont passées. Ainsi, on peut indiquer directement le nom d’une variable et dplyr l’interprétera dans le contexte du tableau de données, c’est-à-dire regardera s’il existe une colonne portant ce nom dans le tableau.\nDans l’expression flights |&gt; filter(month == 1), month est interprété comme la colonne month du tableau flights, à savoir flights$month.\nIl est également possible d’indiquer des objets extérieurs au tableau :\n\nm &lt;- 2\nflights |&gt; \n  filter(month == m)\n\n# A tibble: 24,951 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     2     1      456            500        -4      652            648\n 2  2013     2     1      520            525        -5      816            820\n 3  2013     2     1      527            530        -3      837            829\n 4  2013     2     1      532            540        -8     1007           1017\n 5  2013     2     1      540            540         0      859            850\n 6  2013     2     1      552            600        -8      714            715\n 7  2013     2     1      552            600        -8      919            910\n 8  2013     2     1      552            600        -8      655            709\n 9  2013     2     1      553            600        -7      833            815\n10  2013     2     1      553            600        -7      821            825\n# ℹ 24,941 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nCelà fonctionne parce qu’il n’y a pas de colonne m dans la table. Donc dplyr cherche une variable m dans l’environnement de travail.\n\n\n\n\nslice()\nSOURCE\nLe verbe dplyr::slice() sélectionne des lignes du tableau selon leur position.\nLa \\(345^{ème}\\) ligne du tableau airports :\n\nairports |&gt; \n  slice(345)\n\n# A tibble: 1 × 8\n  faa   name                lat   lon   alt    tz dst   tzone            \n  &lt;chr&gt; &lt;chr&gt;             &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;            \n1 CYF   Chefornak Airport  60.1 -164.    40    -9 A     America/Anchorage\n\n\nPlusieurs lignes :\n\nairports |&gt; \n  slice(3:5)\n\n# A tibble: 3 × 8\n  faa   name                    lat   lon   alt    tz dst   tzone           \n  &lt;chr&gt; &lt;chr&gt;                 &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;           \n1 06C   Schaumburg Regional    42.0 -88.1   801    -6 A     America/Chicago \n2 06N   Randall Airport        41.4 -74.4   523    -5 A     America/New_York\n3 09J   Jekyll Island Airport  31.1 -81.4    11    -5 A     America/New_York\n\n\n\n\narrange()\ndplyr::arrange() réordonne les lignes d’un tableau selon une ou plusieurs colonnes.\nTrier flighs selon le retard au départ5 en ordre croissant :\n5 colonne (variable) dep_delay\nflights |&gt; \n  arrange(dep_delay)\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013    12     7     2040           2123       -43       40           2352\n 2  2013     2     3     2022           2055       -33     2240           2338\n 3  2013    11    10     1408           1440       -32     1549           1559\n 4  2013     1    11     1900           1930       -30     2233           2243\n 5  2013     1    29     1703           1730       -27     1947           1957\n 6  2013     8     9      729            755       -26     1002            955\n 7  2013    10    23     1907           1932       -25     2143           2143\n 8  2013     3    30     2030           2055       -25     2213           2250\n 9  2013     3     2     1431           1455       -24     1601           1631\n10  2013     5     5      934            958       -24     1225           1309\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nTrier selon plusieurs colonnes :\n\nflights |&gt; \n  arrange(month, dep_delay)\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1    11     1900           1930       -30     2233           2243\n 2  2013     1    29     1703           1730       -27     1947           1957\n 3  2013     1    12     1354           1416       -22     1606           1650\n 4  2013     1    21     2137           2159       -22     2232           2316\n 5  2013     1    20      704            725       -21     1025           1035\n 6  2013     1    12     2050           2110       -20     2310           2355\n 7  2013     1    12     2134           2154       -20        4             50\n 8  2013     1    14     2050           2110       -20     2329           2355\n 9  2013     1     4     2140           2159       -19     2241           2316\n10  2013     1    11     1947           2005       -18     2209           2230\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nEt même :\n\nflights |&gt; \n  arrange(month, desc(dep_delay))\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     9      641            900      1301     1242           1530\n 2  2013     1    10     1121           1635      1126     1239           1810\n 3  2013     1     1      848           1835       853     1001           1950\n 4  2013     1    13     1809            810       599     2054           1042\n 5  2013     1    16     1622            800       502     1911           1054\n 6  2013     1    23     1551            753       478     1812           1006\n 7  2013     1    10     1525            900       385     1713           1039\n 8  2013     1     1     2343           1724       379      314           1938\n 9  2013     1     2     2131           1512       379     2340           1741\n10  2013     1     7     2021           1415       366     2332           1724\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nLà, month est en ordre ascendant et dep_delay en ordre descendant.\nCombiné dplyr::slice() et dplyr::arrange() pour, entre autres, trouver les 3 vols ayant eu le plus de retard :\n\nflights |&gt; \n  arrange(desc(dep_delay)) |&gt; \n  slice(1:3)\n\n# A tibble: 3 × 19\n   year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n  &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n1  2013     1     9      641            900      1301     1242           1530\n2  2013     6    15     1432           1935      1137     1607           2120\n3  2013     1    10     1121           1635      1126     1239           1810\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;"
  },
  {
    "objectID": "005_dplyr.html",
    "href": "005_dplyr.html",
    "title": "dplyr",
    "section": "",
    "text": "dplyr facilite le traitement et la manipulation des tableaux de données (qu’il s’agisse de data frame ou de tibble). Il propose une syntaxe claire et cohérente, sous formes de verbes correspondant à des fonctions.\nLes verbes de dplyr prennent en entrée un tableau de données (data frame ou tibble) et renvoient systématiquement un tibble.\nCharger le package :\nlibrary(dplyr, warn.conflicts = FALSE)\nCharger le jeu de données nycflights13, données de tous les vols au départ des aéroports de New-York en 2013, répartis en 3 tables1 :\nCharger le package :\nlibrary(nycflights13)\nCharger les tables :\ndata(flights)\ndata(airports)\ndata(airlines)"
  },
  {
    "objectID": "005_dplyr.html#opérations-sur-les-lignes",
    "href": "005_dplyr.html#opérations-sur-les-lignes",
    "title": "dplyr",
    "section": "1 Opérations sur les lignes",
    "text": "1 Opérations sur les lignes\n\n1.1 filter()\nfilter() des lignes d’une table selon une condition passée en paramètre.\nSeules les lignes pour lesquelles le test renvoie TRUE sont renvoyées2.\n2 une ligne pour laquelle le test renvoie FALSE (faux) ou NA, d’est à dire non avable (valeur manquante) sera ignorée, donc pas renvoyée3 variable monthSélection des vols du mois de janvier3 :\n\nfilter(flights, month == 1)\n\n# A tibble: 27,004 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 26,994 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nOu plus simplement avec un pipe :\n\nflights |&gt; \n  filter(month == 1)\n\n# A tibble: 27,004 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 26,994 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nSélectionner les vols avec un retard au départ4 entre 10 et 15 minutes :\n4 variable dep_delay\nflights |&gt; \n  filter(dep_delay &gt;= 10 & dep_delay &lt;= 15)\n\n# A tibble: 14,919 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      611            600        11      945            931\n 2  2013     1     1      623            610        13      920            915\n 3  2013     1     1      743            730        13     1107           1100\n 4  2013     1     1      743            730        13     1059           1056\n 5  2013     1     1      851            840        11     1215           1206\n 6  2013     1     1      912            900        12     1241           1220\n 7  2013     1     1      914            900        14     1058           1043\n 8  2013     1     1      920            905        15     1039           1025\n 9  2013     1     1     1011           1001        10     1133           1128\n10  2013     1     1     1112           1100        12     1440           1438\n# ℹ 14,909 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nTester avec une fonction. Les vols avec la plus grande distance :\n\nflights |&gt; \n  filter(distance == max(distance))\n\n# A tibble: 342 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      857            900        -3     1516           1530\n 2  2013     1     2      909            900         9     1525           1530\n 3  2013     1     3      914            900        14     1504           1530\n 4  2013     1     4      900            900         0     1516           1530\n 5  2013     1     5      858            900        -2     1519           1530\n 6  2013     1     6     1019            900        79     1558           1530\n 7  2013     1     7     1042            900       102     1620           1530\n 8  2013     1     8      901            900         1     1504           1530\n 9  2013     1     9      641            900      1301     1242           1530\n10  2013     1    10      859            900        -1     1449           1530\n# ℹ 332 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\n\n\n\n\nÉvaluation contextuelle\n\n\n\ndplyr procède à une évaluation contextuelle des expressions qui lui sont passées. Ainsi, on peut indiquer directement le nom d’une variable et dplyr l’interprétera dans le contexte du tableau de données, c’est-à-dire regardera s’il existe une colonne portant ce nom dans le tableau.\nDans l’expression flights |&gt; filter(month == 1), month est interprété comme la colonne month du tableau flights, à savoir flights$month.\nIl est également possible d’indiquer des objets extérieurs au tableau :\n\nm &lt;- 2\nflights |&gt; \n  filter(month == m)\n\n# A tibble: 24,951 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     2     1      456            500        -4      652            648\n 2  2013     2     1      520            525        -5      816            820\n 3  2013     2     1      527            530        -3      837            829\n 4  2013     2     1      532            540        -8     1007           1017\n 5  2013     2     1      540            540         0      859            850\n 6  2013     2     1      552            600        -8      714            715\n 7  2013     2     1      552            600        -8      919            910\n 8  2013     2     1      552            600        -8      655            709\n 9  2013     2     1      553            600        -7      833            815\n10  2013     2     1      553            600        -7      821            825\n# ℹ 24,941 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nCelà fonctionne parce qu’il n’y a pas de colonne m dans la table. Donc dplyr cherche une variable m dans l’environnement de travail.\n\n\n\n\n1.2 slice()\nSOURCE\nLe verbe dplyr::slice() sélectionne des lignes du tableau selon leur position.\nLa 345^{ème} ligne du tableau airports :\n\nairports |&gt; \n  slice(345)\n\n# A tibble: 1 × 8\n  faa   name                lat   lon   alt    tz dst   tzone            \n  &lt;chr&gt; &lt;chr&gt;             &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;            \n1 CYF   Chefornak Airport  60.1 -164.    40    -9 A     America/Anchorage\n\n\nPlusieurs lignes :\n\nairports |&gt; \n  slice(3:5)\n\n# A tibble: 3 × 8\n  faa   name                    lat   lon   alt    tz dst   tzone           \n  &lt;chr&gt; &lt;chr&gt;                 &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;           \n1 06C   Schaumburg Regional    42.0 -88.1   801    -6 A     America/Chicago \n2 06N   Randall Airport        41.4 -74.4   523    -5 A     America/New_York\n3 09J   Jekyll Island Airport  31.1 -81.4    11    -5 A     America/New_York\n\n\n\n\n1.3 arrange()\ndplyr::arrange() réordonne les lignes d’un tableau selon une ou plusieurs colonnes.\nTrier flighs selon le retard au départ5 en ordre croissant :\n5 colonne (variable) dep_delay\nflights |&gt; \n  arrange(dep_delay)\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013    12     7     2040           2123       -43       40           2352\n 2  2013     2     3     2022           2055       -33     2240           2338\n 3  2013    11    10     1408           1440       -32     1549           1559\n 4  2013     1    11     1900           1930       -30     2233           2243\n 5  2013     1    29     1703           1730       -27     1947           1957\n 6  2013     8     9      729            755       -26     1002            955\n 7  2013    10    23     1907           1932       -25     2143           2143\n 8  2013     3    30     2030           2055       -25     2213           2250\n 9  2013     3     2     1431           1455       -24     1601           1631\n10  2013     5     5      934            958       -24     1225           1309\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nTrier selon plusieurs colonnes :\n\nflights |&gt; \n  arrange(month, dep_delay)\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1    11     1900           1930       -30     2233           2243\n 2  2013     1    29     1703           1730       -27     1947           1957\n 3  2013     1    12     1354           1416       -22     1606           1650\n 4  2013     1    21     2137           2159       -22     2232           2316\n 5  2013     1    20      704            725       -21     1025           1035\n 6  2013     1    12     2050           2110       -20     2310           2355\n 7  2013     1    12     2134           2154       -20        4             50\n 8  2013     1    14     2050           2110       -20     2329           2355\n 9  2013     1     4     2140           2159       -19     2241           2316\n10  2013     1    11     1947           2005       -18     2209           2230\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nEt même :\n\nflights |&gt; \n  arrange(month, desc(dep_delay))\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     9      641            900      1301     1242           1530\n 2  2013     1    10     1121           1635      1126     1239           1810\n 3  2013     1     1      848           1835       853     1001           1950\n 4  2013     1    13     1809            810       599     2054           1042\n 5  2013     1    16     1622            800       502     1911           1054\n 6  2013     1    23     1551            753       478     1812           1006\n 7  2013     1    10     1525            900       385     1713           1039\n 8  2013     1     1     2343           1724       379      314           1938\n 9  2013     1     2     2131           1512       379     2340           1741\n10  2013     1     7     2021           1415       366     2332           1724\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nLà, month est en ordre ascendant et dep_delay en ordre descendant.\nCombiné dplyr::slice() et dplyr::arrange() pour, entre autres, trouver les 3 vols ayant eu le plus de retard :\n\nflights |&gt; \n  arrange(desc(dep_delay)) |&gt; \n  slice(1:3)\n\n# A tibble: 3 × 19\n   year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n  &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n1  2013     1     9      641            900      1301     1242           1530\n2  2013     6    15     1432           1935      1137     1607           2120\n3  2013     1    10     1121           1635      1126     1239           1810\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\n1.4 slice_sample()\ndplyr::slice_sample() permet de sélectionner aléatoirement un certain nombres de lignes ou un pourcentage de lignes :\n\nflights |&gt; \n  slice_sample(n = 3)\n\n# A tibble: 3 × 19\n   year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n  &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n1  2013     3     9     2046           2015        31      105            111\n2  2013    10    31     1905           1915       -10     2051           2116\n3  2013     9    14     1754           1800        -6     2027           2053\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nou pour trouver 2.3\\,\\% des lignes :\n\nflights |&gt; \n  slice_sample(prop = 0.023)\n\n# A tibble: 7,745 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     5     1     2130           2127         3        4           2337\n 2  2013     7    12      745            752        -7      906            913\n 3  2013     4    23     1113            959        74     1340           1200\n 4  2013     5     9      931            925         6     1222           1240\n 5  2013    11    25      924            930        -6     1214           1221\n 6  2013    10    30     1259           1300        -1     1613           1605\n 7  2013     6    14     1335           1340        -5     1723           1700\n 8  2013     5    23     1559           1430        89     1856           1601\n 9  2013    11    28      817            820        -3     1132           1153\n10  2013     8     8     1007           1015        -8     1203           1209\n# ℹ 7,735 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\n\n\n\n\nNote\n\n\n\nPour demander un pourcentage à R, il faut lui passer un nombre rationnel, entre 0.000 et 1.000. 5\\,\\% s’écrit \\frac{5}{100} = 0.05\n\n\n\n\n\n\n\n\nImportant\n\n\n\nPour avoir des résultats reproductibles et dans le temps et sur différentes machines, il FAUT utiliser set.seed().\nSans entrer trop dans les détails6, les programmes génèrent des nombres pseudo-aléatoires. Un ordinateur ne sait faire que des calculs. Pour choisir un nombre au hasard, il fait un calcul du genre f(x), où x et le nombre affiché par un compteur interne à l’ordinateur qui change de valeur chaque millième de seconde. N’importe quel programme peut accéder et changer la valeur de ce compteur.\nTout ça pour dire qu’on ne peut pas, jamais faire confiance à l’aléatoire d’un ordinateur. Et set.seed() ?\nExemple :\n\nsample(letters, 3)\n\n[1] \"h\" \"l\" \"x\"\n\nsample(letters, 3)\n\n[1] \"y\" \"w\" \"o\"\n\nsample(letters, 3)\n\n[1] \"i\" \"v\" \"s\"\n\n\nÀ comparer à :\n\nset.seed(123)\nsample(letters, 3)\n\n[1] \"o\" \"s\" \"n\"\n\nset.seed(123)\nsample(letters, 3)\n\n[1] \"o\" \"s\" \"n\"\n\nset.seed(123)\nsample(letters, 3)\n\n[1] \"o\" \"s\" \"n\"\n\n\nLe programme choisit toujours des lettres au hasard. Mais chaque séquence produit le même résultat.\nslice_sample() sert à choisir un extrait d’une table pour faire des essais. Si les extraits successifs ne sont pas les mêmes, les résultats des essais seront biaisés et, surtout, incohérents. En utilisant set.seed()7. En définissant une même semence avant chaque génération aléatoire, on aura toujours la même séquence aléatoire. Et sur touts les machines du monde.\n\n\n7 à noter pour les anglophobes : seed veut dire semence6 quoique j’y suis peut-être déjà !\n\n1.5 distinct()\ndplyr::distinct() renvoie un tableau sans lignes en double.\n\nflights |&gt; \n  select(day, month) |&gt;\n  distinct()\n\n# A tibble: 365 × 2\n     day month\n   &lt;int&gt; &lt;int&gt;\n 1     1     1\n 2     2     1\n 3     3     1\n 4     4     1\n 5     5     1\n 6     6     1\n 7     7     1\n 8     8     1\n 9     9     1\n10    10     1\n# ℹ 355 more rows\n\n\nOn peut lui spécifier une liste de variables : dans ce cas, pour toutes les observations ayant des valeurs identiques pour les variables en question, distinct() ne conservera que la première d’entre elles.\n\nflights |&gt; \n  distinct(month, day)\n\n# A tibble: 365 × 2\n   month   day\n   &lt;int&gt; &lt;int&gt;\n 1     1     1\n 2     1     2\n 3     1     3\n 4     1     4\n 5     1     5\n 6     1     6\n 7     1     7\n 8     1     8\n 9     1     9\n10     1    10\n# ℹ 355 more rows\n\n\nL’option .keep_all renvoie toutes les colonnes du tableau :\n\nflights |&gt; \n  distinct(month, day, .keep_all = TRUE)\n\n# A tibble: 365 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     2       42           2359        43      518            442\n 3  2013     1     3       32           2359        33      504            442\n 4  2013     1     4       25           2359        26      505            442\n 5  2013     1     5       14           2359        15      503            445\n 6  2013     1     6       16           2359        17      451            442\n 7  2013     1     7       49           2359        50      531            444\n 8  2013     1     8      454            500        -6      625            648\n 9  2013     1     9        2           2359         3      432            444\n10  2013     1    10        3           2359         4      426            437\n# ℹ 355 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;"
  },
  {
    "objectID": "005_dplyr.html#opérations-sur-les-colonnes",
    "href": "005_dplyr.html#opérations-sur-les-colonnes",
    "title": "dplyr",
    "section": "2 Opérations sur les colonnes",
    "text": "2 Opérations sur les colonnes\nSource\n\n2.1 select()\ndplyr::select() permet de sélectionner des colonnes d’un tableau de données. Extraire les colonnes lat et lon du tableau airports :\n\nairports |&gt; \n  select(lat, lon)\n\n# A tibble: 1,458 × 2\n     lat    lon\n   &lt;dbl&gt;  &lt;dbl&gt;\n 1  41.1  -80.6\n 2  32.5  -85.7\n 3  42.0  -88.1\n 4  41.4  -74.4\n 5  31.1  -81.4\n 6  36.4  -82.2\n 7  41.5  -84.5\n 8  42.9  -76.8\n 9  39.8  -76.6\n10  48.1 -123. \n# ℹ 1,448 more rows\n\n\nPrécéder le nom de la colonne d’un - élimine la colonne de la sélection :\n\nairports |&gt; \n  select(-lat, -lon)\n\n# A tibble: 1,458 × 6\n   faa   name                             alt    tz dst   tzone              \n   &lt;chr&gt; &lt;chr&gt;                          &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;              \n 1 04G   Lansdowne Airport               1044    -5 A     America/New_York   \n 2 06A   Moton Field Municipal Airport    264    -6 A     America/Chicago    \n 3 06C   Schaumburg Regional              801    -6 A     America/Chicago    \n 4 06N   Randall Airport                  523    -5 A     America/New_York   \n 5 09J   Jekyll Island Airport             11    -5 A     America/New_York   \n 6 0A9   Elizabethton Municipal Airport  1593    -5 A     America/New_York   \n 7 0G6   Williams County Airport          730    -5 A     America/New_York   \n 8 0G7   Finger Lakes Regional Airport    492    -5 A     America/New_York   \n 9 0P2   Shoestring Aviation Airfield    1000    -5 U     America/New_York   \n10 0S9   Jefferson County Intl            108    -8 A     America/Los_Angeles\n# ℹ 1,448 more rows\n\n\ndplyr::select() comprend une série de fonctions facilitant la sélection de multiples colonnes. Par exemple, dplyr::starts_with(), dplyr::contains() ou dplyr::matches() permettent d’exprimer des conditions sur les noms de variables :\n\nflights |&gt; \n  select(starts_with(\"dep_\"))\n\n# A tibble: 336,776 × 2\n   dep_time dep_delay\n      &lt;int&gt;     &lt;dbl&gt;\n 1      517         2\n 2      533         4\n 3      542         2\n 4      544        -1\n 5      554        -6\n 6      554        -4\n 7      555        -5\n 8      557        -3\n 9      557        -3\n10      558        -2\n# ℹ 336,766 more rows\n\n\ncolonneA:colonneZ permet de sélectionner toutes les colonnes entre colonneA et colonneZ, ces deux colonnes incluses :\n\nflights |&gt; \n  select(year:day)\n\n# A tibble: 336,776 × 3\n    year month   day\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;\n 1  2013     1     1\n 2  2013     1     1\n 3  2013     1     1\n 4  2013     1     1\n 5  2013     1     1\n 6  2013     1     1\n 7  2013     1     1\n 8  2013     1     1\n 9  2013     1     1\n10  2013     1     1\n# ℹ 336,766 more rows\n\n\ndplyr::all_of() et dplyr::any_of() permettent de fournir une liste de variables à extraire sous forme de vecteur textuel. Alors que dplyr::all_of() renverra une erreur si une variable n’est pas trouvée dans le tableau de départ, dplyr::any_of() sera moins stricte.\n\nflights |&gt; \n  select(all_of(c(\"year\", \"month\", \"day\")))\n\n# A tibble: 336,776 × 3\n    year month   day\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;\n 1  2013     1     1\n 2  2013     1     1\n 3  2013     1     1\n 4  2013     1     1\n 5  2013     1     1\n 6  2013     1     1\n 7  2013     1     1\n 8  2013     1     1\n 9  2013     1     1\n10  2013     1     1\n# ℹ 336,766 more rows\n\n\ndplyr::where() permets de sélectionner des variables à partir d’une fonction qui renvoie une valeur logique. Par exemple, pour sélectionner seulement les variables textuelles :\n\nflights |&gt; \n  select(where(is.character))\n\n# A tibble: 336,776 × 4\n   carrier tailnum origin dest \n   &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;  &lt;chr&gt;\n 1 UA      N14228  EWR    IAH  \n 2 UA      N24211  LGA    IAH  \n 3 AA      N619AA  JFK    MIA  \n 4 B6      N804JB  JFK    BQN  \n 5 DL      N668DN  LGA    ATL  \n 6 UA      N39463  EWR    ORD  \n 7 B6      N516JB  EWR    FLL  \n 8 EV      N829AS  LGA    IAD  \n 9 B6      N593JB  JFK    MCO  \n10 AA      N3ALAA  LGA    ORD  \n# ℹ 336,766 more rows\n\n\ndplyr::select() peut être utilisée pour réordonner les colonnes d’une table en utilisant la fonction dplyr::everything(), qui sélectionne l’ensemble des colonnes non encore sélectionnées. Ainsi, si l’on souhaite faire passer la colonne name en première position de la table airports, on peut faire :\n\nairports |&gt; \n  select(name, everything())\n\n# A tibble: 1,458 × 8\n   name                           faa     lat    lon   alt    tz dst   tzone    \n   &lt;chr&gt;                          &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;    \n 1 Lansdowne Airport              04G    41.1  -80.6  1044    -5 A     America/…\n 2 Moton Field Municipal Airport  06A    32.5  -85.7   264    -6 A     America/…\n 3 Schaumburg Regional            06C    42.0  -88.1   801    -6 A     America/…\n 4 Randall Airport                06N    41.4  -74.4   523    -5 A     America/…\n 5 Jekyll Island Airport          09J    31.1  -81.4    11    -5 A     America/…\n 6 Elizabethton Municipal Airport 0A9    36.4  -82.2  1593    -5 A     America/…\n 7 Williams County Airport        0G6    41.5  -84.5   730    -5 A     America/…\n 8 Finger Lakes Regional Airport  0G7    42.9  -76.8   492    -5 A     America/…\n 9 Shoestring Aviation Airfield   0P2    39.8  -76.6  1000    -5 U     America/…\n10 Jefferson County Intl          0S9    48.1 -123.    108    -8 A     America/…\n# ℹ 1,448 more rows\n\n\n\n\n2.2 relocate()\nPour réordonner des colonnes, on pourra aussi avoir recours à dplyr::relocate() en indiquant les premières variables. Il n’est pas nécessaire d’ajouter everything() car avec dplyr::relocate() toutes les variables sont conservées.\n\nairports |&gt; \n  relocate(lon, lat, name)\n\n# A tibble: 1,458 × 8\n      lon   lat name                           faa     alt    tz dst   tzone    \n    &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;                          &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;    \n 1  -80.6  41.1 Lansdowne Airport              04G    1044    -5 A     America/…\n 2  -85.7  32.5 Moton Field Municipal Airport  06A     264    -6 A     America/…\n 3  -88.1  42.0 Schaumburg Regional            06C     801    -6 A     America/…\n 4  -74.4  41.4 Randall Airport                06N     523    -5 A     America/…\n 5  -81.4  31.1 Jekyll Island Airport          09J      11    -5 A     America/…\n 6  -82.2  36.4 Elizabethton Municipal Airport 0A9    1593    -5 A     America/…\n 7  -84.5  41.5 Williams County Airport        0G6     730    -5 A     America/…\n 8  -76.8  42.9 Finger Lakes Regional Airport  0G7     492    -5 A     America/…\n 9  -76.6  39.8 Shoestring Aviation Airfield   0P2    1000    -5 U     America/…\n10 -123.   48.1 Jefferson County Intl          0S9     108    -8 A     America/…\n# ℹ 1,448 more rows\n\n\n\n\n2.3 rename()\nUne variante de dplyr::select() est dplyr::rename(), qui permet de renommer facilement des colonnes. On l’utilise en lui passant des paramètres de la forme nouveau_nom = ancien_nom. Ainsi, si on veut renommer les colonnes lon et lat de airports en longitude et latitude :\n\nairports |&gt; \n  rename(longitude = lon, latitude = lat)\n\n# A tibble: 1,458 × 8\n   faa   name                         latitude longitude   alt    tz dst   tzone\n   &lt;chr&gt; &lt;chr&gt;                           &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;\n 1 04G   Lansdowne Airport                41.1     -80.6  1044    -5 A     Amer…\n 2 06A   Moton Field Municipal Airpo…     32.5     -85.7   264    -6 A     Amer…\n 3 06C   Schaumburg Regional              42.0     -88.1   801    -6 A     Amer…\n 4 06N   Randall Airport                  41.4     -74.4   523    -5 A     Amer…\n 5 09J   Jekyll Island Airport            31.1     -81.4    11    -5 A     Amer…\n 6 0A9   Elizabethton Municipal Airp…     36.4     -82.2  1593    -5 A     Amer…\n 7 0G6   Williams County Airport          41.5     -84.5   730    -5 A     Amer…\n 8 0G7   Finger Lakes Regional Airpo…     42.9     -76.8   492    -5 A     Amer…\n 9 0P2   Shoestring Aviation Airfield     39.8     -76.6  1000    -5 U     Amer…\n10 0S9   Jefferson County Intl            48.1    -123.    108    -8 A     Amer…\n# ℹ 1,448 more rows\n\n\n\n\n2.4 pull()\nLa fonction dplyr::pull() permet d’accéder au contenu d’une variable. C’est un équivalent aux opérateurs $ ou [[]]. On peut lui passer un nom de variable ou bien sa position.\n\nairports |&gt; \n  pull(alt) |&gt; \n  mean()\n\n[1] 1001.416\n\n\n\n\n2.5 mutate()\nSource\ndplyr::mutate() permet de créer de nouvelles colonnes dans le tableau de données, en général à partir de variables existantes.\nPar exemple, la table airports contient l’altitude de l’aéroport en pieds. Si l’on veut créer une nouvelle variable alt_m avec l’altitude en mètres, on peut faire :\n\nairports &lt;- \n  airports |&gt; \n  mutate(alt_m = alt / 3.2808)\nairports\n\n# A tibble: 1,458 × 9\n   faa   name                          lat    lon   alt    tz dst   tzone  alt_m\n   &lt;chr&gt; &lt;chr&gt;                       &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;  &lt;dbl&gt;\n 1 04G   Lansdowne Airport            41.1  -80.6  1044    -5 A     Amer… 318.  \n 2 06A   Moton Field Municipal Airp…  32.5  -85.7   264    -6 A     Amer…  80.5 \n 3 06C   Schaumburg Regional          42.0  -88.1   801    -6 A     Amer… 244.  \n 4 06N   Randall Airport              41.4  -74.4   523    -5 A     Amer… 159.  \n 5 09J   Jekyll Island Airport        31.1  -81.4    11    -5 A     Amer…   3.35\n 6 0A9   Elizabethton Municipal Air…  36.4  -82.2  1593    -5 A     Amer… 486.  \n 7 0G6   Williams County Airport      41.5  -84.5   730    -5 A     Amer… 223.  \n 8 0G7   Finger Lakes Regional Airp…  42.9  -76.8   492    -5 A     Amer… 150.  \n 9 0P2   Shoestring Aviation Airfie…  39.8  -76.6  1000    -5 U     Amer… 305.  \n10 0S9   Jefferson County Intl        48.1 -123.    108    -8 A     Amer…  32.9 \n# ℹ 1,448 more rows\n\n\nOn peut créer plusieurs nouvelles colonnes en une seule fois, et les expressions successives peuvent prendre en compte les résultats des calculs précédents. L’exemple suivant convertit d’abord la distance en kilomètres dans une variable distance_km, puis utilise cette nouvelle colonne pour calculer la vitesse en km/h.\n\nflights &lt;- \n  flights |&gt; \n  mutate(\n    distance_km = distance / 0.62137,\n    vitesse_kmh = distance_km / air_time * 60\n  )\nflights\n\n# A tibble: 336,776 × 21\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 13 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;, distance_km &lt;dbl&gt;,\n#   vitesse_kmh &lt;dbl&gt;"
  },
  {
    "objectID": "005_dplyr.html#opérations-groupées",
    "href": "005_dplyr.html#opérations-groupées",
    "title": "dplyr",
    "section": "3 Opérations groupées",
    "text": "3 Opérations groupées\n\n3.1 group_by()\nUn élément très important de dplyr est la fonction dplyr::group_by(). Elle permet de définir des groupes de lignes à partir des valeurs d’une ou plusieurs colonnes. Par exemple, on peut grouper les vols selon leur mois :\n\nflights |&gt; \n  group_by(month)\n\n# A tibble: 336,776 × 21\n# Groups:   month [12]\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 13 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;, distance_km &lt;dbl&gt;,\n#   vitesse_kmh &lt;dbl&gt;\n\n\nPar défaut ceci ne fait rien de visible, à part l’apparition d’une mention Groups dans l’affichage du résultat. Mais à partir du moment où des groupes ont été définis, les verbes comme dplyr::slice() ou dplyr::mutate() vont en tenir compte lors de leurs opérations.\nPar exemple, si on applique dplyr::slice() à un tableau préalablement groupé, il va sélectionner les lignes aux positions indiquées pour chaque groupe. Ainsi la commande suivante affiche le premier vol de chaque mois, selon leur ordre d’apparition dans le tableau :\n\nflights |&gt; \n  group_by(month) |&gt; \n  slice(1)\n\n# A tibble: 12 × 21\n# Groups:   month [12]\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     2     1      456            500        -4      652            648\n 3  2013     3     1        4           2159       125      318             56\n 4  2013     4     1      454            500        -6      636            640\n 5  2013     5     1        9           1655       434      308           2020\n 6  2013     6     1        2           2359         3      341            350\n 7  2013     7     1        1           2029       212      236           2359\n 8  2013     8     1       12           2130       162      257             14\n 9  2013     9     1        9           2359        10      343            340\n10  2013    10     1      447            500       -13      614            648\n11  2013    11     1        5           2359         6      352            345\n12  2013    12     1       13           2359        14      446            445\n# ℹ 13 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;, distance_km &lt;dbl&gt;,\n#   vitesse_kmh &lt;dbl&gt;\n\n\nIdem pour dplyr::mutate() : les opérations appliquées lors du calcul des valeurs des nouvelles colonnes sont appliquée groupe de lignes par groupe de lignes. Dans l’exemple suivant, on ajoute une nouvelle colonne qui contient le retard moyen du mois correspondant :\n\nflights |&gt; \n  group_by(month) |&gt; \n  mutate(mean_delay_month = mean(dep_delay, na.rm = TRUE)) |&gt; \n  relocate(mean_delay_month) |&gt; \n  slice(1)\n\n# A tibble: 12 × 22\n# Groups:   month [12]\n   mean_delay_month  year month   day dep_time sched_dep_time dep_delay arr_time\n              &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;\n 1            10.0   2013     1     1      517            515         2      830\n 2            10.8   2013     2     1      456            500        -4      652\n 3            13.2   2013     3     1        4           2159       125      318\n 4            13.9   2013     4     1      454            500        -6      636\n 5            13.0   2013     5     1        9           1655       434      308\n 6            20.8   2013     6     1        2           2359         3      341\n 7            21.7   2013     7     1        1           2029       212      236\n 8            12.6   2013     8     1       12           2130       162      257\n 9             6.72  2013     9     1        9           2359        10      343\n10             6.24  2013    10     1      447            500       -13      614\n11             5.44  2013    11     1        5           2359         6      352\n12            16.6   2013    12     1       13           2359        14      446\n# ℹ 14 more variables: sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;,\n#   flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;,\n#   distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;,\n#   distance_km &lt;dbl&gt;, vitesse_kmh &lt;dbl&gt;\n\n\nCeci peut permettre, par exemple, de déterminer si un retard donné est supérieur ou inférieur au retard moyen du mois en cours.\ndplyr::group_by() peut aussi être utile avec dplyr::filter(), par exemple pour sélectionner les vols avec le retard au départ le plus important pour chaque mois :\n\nflights |&gt; \n  group_by(month) |&gt; \n  filter(dep_delay == max(dep_delay, na.rm = TRUE))\n\n# A tibble: 12 × 21\n# Groups:   month [12]\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     9      641            900      1301     1242           1530\n 2  2013    10    14     2042            900       702     2255           1127\n 3  2013    11     3      603           1645       798      829           1913\n 4  2013    12     5      756           1700       896     1058           2020\n 5  2013     2    10     2243            830       853      100           1106\n 6  2013     3    17     2321            810       911      135           1020\n 7  2013     4    10     1100           1900       960     1342           2211\n 8  2013     5     3     1133           2055       878     1250           2215\n 9  2013     6    15     1432           1935      1137     1607           2120\n10  2013     7    22      845           1600      1005     1044           1815\n11  2013     8     8     2334           1454       520      120           1710\n12  2013     9    20     1139           1845      1014     1457           2210\n# ℹ 13 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;, distance_km &lt;dbl&gt;,\n#   vitesse_kmh &lt;dbl&gt;\n\n\n\n\n\n\n\n\nAvertissement\n\n\n\nLa clause dplyr::group_by() marche pour les verbes déjà vus précédemment, sauf pour dplyr::arrange(), qui par défaut trie la table sans tenir compte des groupes. Pour obtenir un tri par groupe, il faut lui ajouter l’argument .by_group = TRUE.\nOn peut voir la différence en comparant les deux résultats suivants :\n\nflights |&gt; \n  group_by(month) |&gt; \n  arrange(desc(dep_delay)) |&gt; \n  relocate(dep_delay)\n\n# A tibble: 336,776 × 21\n# Groups:   month [12]\n   dep_delay  year month   day dep_time sched_dep_time arr_time sched_arr_time\n       &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;    &lt;int&gt;          &lt;int&gt;\n 1      1301  2013     1     9      641            900     1242           1530\n 2      1137  2013     6    15     1432           1935     1607           2120\n 3      1126  2013     1    10     1121           1635     1239           1810\n 4      1014  2013     9    20     1139           1845     1457           2210\n 5      1005  2013     7    22      845           1600     1044           1815\n 6       960  2013     4    10     1100           1900     1342           2211\n 7       911  2013     3    17     2321            810      135           1020\n 8       899  2013     6    27      959           1900     1236           2226\n 9       898  2013     7    22     2257            759      121           1026\n10       896  2013    12     5      756           1700     1058           2020\n# ℹ 336,766 more rows\n# ℹ 13 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;, distance_km &lt;dbl&gt;,\n#   vitesse_kmh &lt;dbl&gt;\n\nflights |&gt; \n  group_by(month) |&gt; \n  arrange(desc(dep_delay), .by_group = TRUE) |&gt; \n  relocate(dep_delay)\n\n# A tibble: 336,776 × 21\n# Groups:   month [12]\n   dep_delay  year month   day dep_time sched_dep_time arr_time sched_arr_time\n       &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;    &lt;int&gt;          &lt;int&gt;\n 1      1301  2013     1     9      641            900     1242           1530\n 2      1126  2013     1    10     1121           1635     1239           1810\n 3       853  2013     1     1      848           1835     1001           1950\n 4       599  2013     1    13     1809            810     2054           1042\n 5       502  2013     1    16     1622            800     1911           1054\n 6       478  2013     1    23     1551            753     1812           1006\n 7       385  2013     1    10     1525            900     1713           1039\n 8       379  2013     1     1     2343           1724      314           1938\n 9       379  2013     1     2     2131           1512     2340           1741\n10       366  2013     1     7     2021           1415     2332           1724\n# ℹ 336,766 more rows\n# ℹ 13 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;, distance_km &lt;dbl&gt;,\n#   vitesse_kmh &lt;dbl&gt;\n\n\n\n\n\n\n3.2 summarise()\nSource"
  }
]