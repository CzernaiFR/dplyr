---
title: "Combiner des variables"
---

[Source](https://larmarange.github.io/guide-R/manipulation/combiner-variables.html)

Parfois, on a besoin de créer une nouvelle variable en partant des valeurs d’une ou plusieurs autres variables. Dans ce cas on peut utiliser les fonctions [`dplyr::if_else()`](https://dplyr.tidyverse.org/reference/if_else.html) pour les cas les plus simples, ou [`dplyr::case_when()`](https://dplyr.tidyverse.org/reference/case_when.html) pour les cas plus complexes.

Une fois encore, nous utiliser le jeu de données `hdv2003` pour illustrer ces différentes fonctions.

```{r}
library(tidyverse)
data("hdv2003", package = "questionr")
```

## `if_else()`

[`dplyr::if_else()`](https://dplyr.tidyverse.org/reference/if_else.html) prend trois arguments : un test, les valeurs à renvoyer si le test est vrai, et les valeurs à renvoyer si le test est faux.

Voici un exemple simple :

```{r}
v <- c(12, 14, 8, 16)
if_else(v > 10, "supérieur à 10", "inférieur à 10")
```

La fonction devient plus intéressante avec des tests combinant plusieurs variables. Par exemple, imaginons qu’on souhaite créer une nouvelle variable indiquant les hommes de plus de 60 ans :

```{r}
hdv2003 <- 
  hdv2003 |> 
  mutate(
    statut = if_else(
      sexe == "Homme" & age > 60,
      "Homme de plus de 60 ans",
      "Autre"
    )
  )
hdv2003 |> 
  pull(statut) |> 
  questionr::freq()
```

Il est possible d’utiliser des variables ou des combinaisons de variables au sein du [`dplyr::if_else()`](https://dplyr.tidyverse.org/reference/if_else.html). Supposons une petite enquête menée auprès de femmes et d’hommes. Le questionnaire comportait une question de préférence posée différemment aux femmes et aux hommes et dont les réponses ont ainsi été collectées dans deux variables différentes, *pref_f* et *pref_h*, que l’on souhaite combiner en une seule variable. De même, une certaine mesure quantitative a été réalisée, mais une correction est nécessaire pour normaliser ce score (retirer 0.4 aux scores des hommes et 0.6 aux scores des femmes). Cela peut être réalisé avec le code ci-dessous.

```{r}
df <- tibble(
  sexe = c("f", "f", "h", "h"),
  pref_f = c("a", "b", NA, NA),
  pref_h = c(NA, NA, "c", "d"),
  mesure = c(1.2, 4.1, 3.8, 2.7)
)
df
```

```{r}
df <- 
  df |> 
  mutate(
    pref = if_else(sexe == "f", pref_f, pref_h),
    indicateur = if_else(sexe == "h", mesure - 0.4, mesure - 0.6)
  )
df
```

## `case_when()`

[`dplyr::case_when()`](https://dplyr.tidyverse.org/reference/case_when.html) est une généralisation de [`dplyr::if_else()`](https://dplyr.tidyverse.org/reference/if_else.html) qui permet d’indiquer plusieurs tests et leurs valeurs associées.

Imaginons que l’on souhaite créer une nouvelle variable permettant d’identifier les hommes de plus de 60 ans, les femmes de plus de 60 ans, et les autres. On peut utiliser la syntaxe suivante :

```{r}
hdv2003 <-
  hdv2003 |> 
  mutate(
    statut = case_when(
      age >= 60 & sexe == "Homme" ~ "Homme, 60 et plus",
      age >= 60 & sexe == "Femme" ~ "Femme, 60 et plus",
      TRUE ~ "Autre"
    )
  )
hdv2003 |> 
  pull(statut) |> 
  questionr::freq()
```

[`dplyr::case_when()`](https://dplyr.tidyverse.org/reference/case_when.html) prend en arguments une série d’instructions sous la forme `condition ~ valeur`. Il les exécute une par une, et dès qu’une `condition` est vraie, il renvoi la `valeur` associée.

La clause `TRUE ~ "Autre"` permet d’assigner une valeur à toutes les lignes pour lesquelles aucune des conditions précédentes n’est vraie.

## `recode_if()`

Parfois, on n’a besoin de ne modifier une variable que pour certaines observations. Prenons un petit exemple :

```{r}
df <- tibble(
  pref = factor(c("bleu", "rouge", "autre", "rouge", "autre")),
  autre_details = c(NA, NA, "bleu ciel", NA, "jaune")
)
df
```

Nous avons demandé aux enquêtés d’indiquer leur couleur préférée. Ils pouvaient répondre bleu ou rouge et avait également la possibilité de choisir autre et d’indiquer la valeur de leur choix dans un champs textuel libre.

Une des personnes enquêtées a choisi autre et a indiqué dans le champs texte la valeur bleu ciel. Pour les besoins de l’analyse, on peut considérer que cette valeur bleu ciel pour être tout simplement recodée en bleu.

En syntaxe **R** classique, on pourra simplement faire :

```{r}
df$pref[df$autre_details == "bleu ciel"] <- "bleu"
df
```

Avec [`dplyr::if_else()`](https://dplyr.tidyverse.org/reference/if_else.html), on serait tenté d’écrire :

```{r}
df |> 
  mutate(pref = if_else(autre_details == "bleu ciel", "bleu", pref))
```

On obtient une erreur, car [`dplyr::if_else()`](https://dplyr.tidyverse.org/reference/if_else.html) exige les valeurs fournie pour `true` et `false` soient de même type. Essayons alors :

```{r}
df |> 
  mutate(pref = if_else(autre_details == "bleu ciel", factor("bleu"), pref))
```

Pour obtenir le bon résultat, il faudrait inverser la condition :

```{r}
df |> 
  mutate(pref = if_else(
    autre_details != "bleu ciel", 
    pref, 
    factor("bleu")
  ))
```

Mais ce n’est toujours pas suffisant. En effet, la variable *autre_details* a des valeurs manquantes pour lesquelles le test `autre_details != "bleu ciel"` renvoie `NA` ce qui une fois encore génère des valeurs manquantes non souhaitées. Dès lors, il nous faut soit définir l’argument `missing` de [`dplyr::if_else()`](https://dplyr.tidyverse.org/reference/if_else.html), soit être plus précis dans notre test.

```{r}
df |> 
  mutate(pref = if_else(
    autre_details != "bleu ciel", 
    pref, 
    factor("bleu"),
    missing = pref
  ))
```

```{r}
df |> 
  mutate(pref = if_else(
    autre_details != "bleu ciel" | is.na(autre_details), 
    pref, 
    factor("bleu")
  ))
```

Bref, on peut s’en sortir avec [`dplyr::if_else()`](https://dplyr.tidyverse.org/reference/if_else.html) mais ce n’est pas forcément le plus pratique dans le cas présent. La syntaxe en base **R** fonctionne très bien, mais ne peut pas être intégrée à un enchaînement d’opérations utilisant le *pipe*.

Dans ce genre de situation, on pourra être intéressé par la fonction [`labelled::recode_if()`](https://larmarange.github.io/labelled/reference/recode_if.html) disponible dans le package [labelled](https://larmarange.github.io/labelled/). Elle permet de ne modifier que certaines observations d’un vecteur en fonction d’une condition. Si la condition vaut `FALSE` ou `NA`, les observations concernées restent inchangées. Voyons comment cela s’écrit :

```{r}
df <-
  df |> 
  mutate(
    pref = pref |> 
      labelled::recode_if(autre_details == "bleu ciel", "bleu")
  )
df
```

C’est tout de suite plus intuitif !
